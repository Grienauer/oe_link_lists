<?php

/**
 * @file
 * OpenEuropa Link Lists module.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\SubformState;

/**
 * Implements hook_form_alter().
 */
function oe_link_lists_test_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $form['link_source'] = [
    '#type' => 'details',
    '#title' => t('Example link source plugins'),
    '#group' => 'additional_settings',
  ];

  /** @var \Drupal\oe_link_lists\LinkSourcePluginManagerInterface $manager */
  $manager = \Drupal::service('plugin.manager.link_source');

  $options = $manager->getPluginsAsOptions();

  /** @var \Drupal\node\NodeTypeInterface $node_type */
  $node_type = $form_state->getBuildInfo()['callback_object']->getEntity();

  $plugin_id = NULL;
  $existing_config = [];
  if ($form_state->getValue('plugin') && $form_state->getValue('plugin') !== '_none') {
    // Get the plugin in case of an Ajax choice.
    $plugin_id = $form_state->getValue('plugin');
  }

  if (!$plugin_id && !$form_state->isProcessingInput()) {
    // If we are just loading the form without a user making a choice, try to
    // get the plugin from the current node type configuration.
    $plugin_id = $node_type->getThirdPartySetting('oe_link_lists_test', 'plugin');
  }

  if ($plugin_id === $node_type->getThirdPartySetting('oe_link_lists_test', 'plugin')) {
    // If the plugin is the same as the one in storage, prepare the stored
    // plugin configuration to pass to the plugin form a bit later.
    $existing_config = $node_type->getThirdPartySetting('oe_link_lists_test', 'plugin_configuration', []);
  }

  $form['link_source']['plugin'] = [
    '#type' => 'select',
    '#title' => t('The plugin'),
    '#empty_option' => t('None'),
    '#empty_value' => '_none',
    '#options' => $options,
    '#ajax' => [
      'callback' => 'oe_link_lists_test_form_node_type_edit_form_ajax',
      'wrapper' => 'plugin-configuration',
    ],
    '#default_value' => $plugin_id,
  ];

  // A wrapper that the Ajax callback will replace.
  $form['link_source']['plugin_configuration_wrapper'] = [
    '#type' => 'container',
    '#attributes' => [
      'id' => 'plugin-configuration',
    ],
    '#weight' => 10,
  ];

  // If we have determined a plugin (either by way of default stored value or
  // user selection), create the form element for its configuration. For this
  // we pass potentially existing configuration to the plugin so that it can
  // use it in its form elements' default values.
  if ($plugin_id) {
    /** @var \Drupal\Core\Plugin\PluginFormInterface $plugin */
    $plugin = $manager->createInstance($plugin_id, $existing_config);

    // A simple fieldset for wrapping the plugin configuration form elements.
    $form['link_source']['plugin_configuration_wrapper']['plugin_configuration'][$plugin_id] = [
      '#type' => 'fieldset',
      '#title' => t('@plugin configuration', ['@plugin' => $plugin->label()]),
    ];

    // When working with embedded forms, we need to create a subform state
    // based on the form element that will be the parent to the form which will
    // be embedded - in our case the plugin configuration form. And we pass
    // to the plugin only that part of the form as well (not the entire thing).
    // Moreover, we make sure we nest the individual plugin configuration form
    // within their own "namespace" to avoid naming collisions if one provides
    // form elements with the same name as the others.
    $plugin_form = &$form['link_source']['plugin_configuration_wrapper']['plugin_configuration'][$plugin_id];
    $subform_state = SubformState::createForSubform($plugin_form, $form, $form_state);
    $form['link_source']['plugin_configuration_wrapper']['plugin_configuration'][$plugin_id] = $plugin->buildConfigurationForm($plugin_form, $subform_state);
  }

  // Submit callback to handler the saving of the data.
  $form['actions']['submit']['#submit'] = array_merge(['oe_link_lists_test_form_node_type_edit_form_submit'], $form['actions']['submit']['#submit']);
}

/**
 * Submit callback for the node type form.
 *
 * Saves the data into the node type third party settings.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @see oe_link_lists_test_form_node_type_edit_form_alter()
 */
function oe_link_lists_test_form_node_type_edit_form_submit(array &$form, FormStateInterface $form_state): void {
  $plugin_id = $form_state->getValue('plugin');
  if (!$plugin_id) {
    return;
  }

  /** @var \Drupal\node\NodeTypeInterface $node_type */
  $node_type = $form_state->getBuildInfo()['callback_object']->getEntity();

  if ($plugin_id === '_none') {
    $node_type->unsetThirdPartySetting('oe_link_lists_test', 'plugin');
    $node_type->unsetThirdPartySetting('oe_link_lists_test', 'plugin_configuration');
    $node_type->save();
    return;
  }

  // Similar to when we embedded the form, we need to use a subform state
  // when handling the submission. The plugin's form submit handler should
  // receive only the bit of the form that concerns it and it's responsibility
  // is to process and save the data into its own configuration array. From
  // there, we read it and store it wherever we want (third party settings).
  // Normally this step would happen directly on the form of a config entity
  // and the values would be stored automatically into one of its fields. But
  // since we are altering configs that do not belong to us, we need to store
  // the values manually.
  /** @var \Drupal\oe_link_lists\LinkSourceInterface $plugin */
  $plugin = \Drupal::service('plugin.manager.link_source')->createInstance($plugin_id);
  $subform_state = SubformState::createForSubform($form['link_source']['plugin_configuration_wrapper']['plugin_configuration'][$plugin_id], $form, $form_state);
  $plugin->submitConfigurationForm($form['link_source']['plugin_configuration_wrapper']['plugin_configuration'][$plugin_id], $subform_state);
  $configuration = $plugin->getConfiguration();
  $node_type->setThirdPartySetting('oe_link_lists_test', 'plugin', $plugin_id);
  $node_type->setThirdPartySetting('oe_link_lists_test', 'plugin_configuration', $configuration);
  $node_type->save();
}

/**
 * Ajax callback for the NodeType edit form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return array
 *   The wrapper form element.
 */
function oe_link_lists_test_form_node_type_edit_form_ajax(array &$form, FormStateInterface $form_state): array {
  return $form['link_source']['plugin_configuration_wrapper'];
}
