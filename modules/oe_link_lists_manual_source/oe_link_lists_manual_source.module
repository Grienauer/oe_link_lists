<?php

/**
 * @file
 * Contains Drupal hooks.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\oe_link_lists\Entity\LinkList;
use Drupal\oe_link_lists_manual_source\Entity\LinkListLink;
use Drupal\oe_link_lists_manual_source\LinkListLinkInlineForm;

/**
 * Implements hook_entity_type_build().
 */
function oe_link_lists_manual_source_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  if (isset($entity_types['link_list_link'])) {
    $entity_types['link_list_link']->setHandlerClass('inline_form', LinkListLinkInlineForm::class);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for the link list entity type.
 *
 * For link lists that use the ManualLinkSource plugin we need to copy the links
 * from the reference field into the plugin configuration. This needs to happen
 * at this stage to ensure new referenced links have been created.
 */
function oe_link_lists_manual_source_link_list_presave(EntityInterface $entity) {
  /** @var \Drupal\oe_link_lists\Entity\LinkListInterface $entity */
  $configuration = $entity->getConfiguration();

  if ($entity->bundle() !== 'manual') {
    return;
  }

  $configuration['source'] = [
    'plugin' => 'manual_links',
    'plugin_configuration' => [],
  ];

  if ($entity->get('links')->isEmpty()) {
    // If there are no referenced links we don't have to do anything.
    $entity->setConfiguration($configuration);
    return;
  }

  $ids = [];
  foreach ($entity->get('links')->getValue() as $value) {
    $ids[$value['target_revision_id']] = [
      'entity_id' => $value['target_id'],
      'entity_revision_id' => $value['target_revision_id'],
    ];

    // @todo move this to IEF directly where the entity is being built.
    $link = LinkListLink::load($value['target_id']);
    $link->setParentEntity($entity, 'links');
    $link->save();
  }
  $configuration['source']['plugin_configuration']['links'] = $ids;
  $entity->setConfiguration($configuration);
}

/**
 * Implements hook_entity_delete().
 *
 * Delete orphan manual link list links.
 */
function oe_link_lists_manual_source_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\oe_link_lists\Entity\LinkListInterface $entity */
  if (!$entity instanceof LinkList) {
    return;
  }

  if ($entity->bundle() !== 'manual' || $entity->get('links')->isEmpty()) {
    return;
  }

  $ids = $entity->get('links')->getValue();
  $link_list_link_storage = \Drupal::entityTypeManager()->getStorage('link_list_link');
  $link_entities = $link_list_link_storage->loadMultipleRevisions(array_column($ids, 'target_revision_id'));

  if (empty($link_entities)) {
    return;
  }

  $link_list_link_storage->delete($link_entities);
}
